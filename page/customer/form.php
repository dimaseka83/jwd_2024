<?php
// session_start() initializes or resumes a session, allowing you to store and retrieve session data.
// The conditional statement checks if the user is logged in by verifying the presence of a specific session variable ('role').
//  If the user is not logged in, they are redirected to the login page.
// ob_start() turns on output buffering, which captures output generated by PHP scripts.
session_start();
if (!isset($_SESSION['role'])) {
  header('Location: /page/auth/login.php');
} else if ($_SESSION['role'] != 'customer') {
  header('Location: /page/admin/pesanan.php');
}

ob_start();
?>
<div class="resultSimpan container mt-5"></div>
<!-- form -->
<div class="container mt-5">
  <h1 class="display-6">Form Pemesanan Kamar</h1>

  <form class="row g-3 formPemesanan">
    <div class="col-md-6">
      <div class="form-group">
        <label for="">Nama Pemesan</label>
        <input type="text" name="nama" id="" class="form-control" placeholder="" aria-describedby="helpId">
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="">Nomor Identitas</label>
        <input type="number" name="identitas" id="" class="form-control" placeholder="" aria-describedby="helpId">
        <div class="invalid-feedback">Isian Salah Harus 16 Digit</div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="">Jenis Kelamin</label>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="kelamin" id="exampleRadios1" value="laki" checked>
          <label class="form-check-label" for="exampleRadios1">
            Laki-laki
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="kelamin" id="exampleRadios2" value="perempuan">
          <label class="form-check-label" for="exampleRadios2">
            Perempuan
          </label>
        </div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="">Tipe Kamar</label>
        <select name="kamar" id="" class="form-control"></select>
      </div>
    </div>

    <div class="col-md 6">
      <div class="form-group">
        <label for="">Harga</label>
        <input type="text" class="form-control priceKamar" disabled placeholder="" aria-describedby="helpId">
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="">Tanggal Pesan</label>
        <input type="date" name="tglpesan" id="" class="form-control checkIn" placeholder="" aria-describedby="helpId">
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="">Durasi</label>
        <div class="input-group mb-3">
          <input type="text" name="jmlHari" class="form-control" aria-label="Recipient's username" aria-describedby="basic-addon2">
          <span class="input-group-text" id="basic-addon2">Hari</span>
          <div class="invalid-feedback">Harus isi angka</div>
        </div>
        <span class="text-muted"><span class="text-danger">*</span>Diskon 10% jika lebih dari 3 hari</span>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="">Termasuk Breakfast</label>
        <div class="form-check">
          <input class="form-check-input" name="breakfast" type="checkbox" value="0" id="breakFastCheck">
          <label class="form-check-label" for="breakFastCheck">
            Tidak
          </label>
        </div>
      </div>
    </div>

    <div class="col-md-12">
      <div class="form-group">
        <label for="">Total Bayar</label>
        <input type="text" class="form-control totalTagihan" disabled>
      </div>
    </div>

    <div class="col-12">
      <button class="btn btn-success" type="button" onclick="kalkulasiTagihan()">
        Hitung
      </button>
      <button class="btn btn-success mx-2" type="button" onclick="simpan()">Simpan</button>
      <a class="btn btn-danger" type="button" href="/" onclick="resetForm()">
        Batal
      </a>
    </div>
  </form>
</div>


<!-- Modal -->
<div class="modal fade modalForm" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Nota Pemesanan</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
      </div>
    </div>
  </div>
</div>

<script>
  let resultSave = null;
  let dataKamar = []

  // This jQuery code snippet adds an event listener to a checkbox with the ID `breakFastCheck`.When the checkbox state changes, it toggles between two states: if it becomes checked, it sets its value to "1"
  // and changes the associated label text to "Ya";
  // if it becomes unchecked, it sets its value to "0"
  // and changes the associated label text to "Tidak".This functionality enables users to indicate whether they want breakfast included in their booking by checking or unchecking the checkbox, and it dynamically updates the UI to reflect their choice.
  $("#breakFastCheck").change(function() {
    if (this.checked) {
      $(this).val("1");
      $('label[for="breakFastCheck"]').text('Ya');
    } else {
      $(this).val("0");
      $('label[for="breakFastCheck"]').text('Tidak');
    }
  });

  // This jQuery code is executed when the document is fully loaded.It sends an AJAX GET request to the "/backend/kamar.php"
  // endpoint to fetch data about rooms or accommodations.Upon a successful response, it populates a dropdown menu(`select`
  //   element) with options
  // for selecting a room.It constructs HTML options dynamically based on the received data, iterating over each item in the `result`
  // array and generating an option with the room 's ID as its value and its name as the displayed text. Finally, it injects the generated HTML into the dropdown menu, allowing users to select a room from the available options.
  $(document).ready(function() {
    $.ajax({
      url: "/backend/kamar.php",
      type: "GET",
      success: function(result) {
        dataKamar = result;
        let html = "";
        html += `<option value="">Pilih Kamar</option>`;
        dataKamar.forEach((item) => {
          html += `<option value="${item.id}">${item.nama}</option>`;
        });
        $("select[name='kamar']").html(html);
      },
    });
  });

  // This jQuery snippet attaches an event listener to the change event of a dropdown menu(`select`
  //   element) with the name attribute set to "kamar".When the selected option in the dropdown changes, it retrieves the value of the selected option, representing the room 's ID. Using this ID, it searches the `dataKamar` array to find the corresponding room object. Upon finding the object, it extracts the price (`harga`) of the room and formats it into Indonesian Rupiah currency using the `currencyRupiah()` function. Finally, it sets the formatted price as the value of an input field with the class "priceKamar" within the ".formPemesanan" container, presumably to display the selected room'
  // s price to the user during the booking process.
  $("select[name='kamar']").change(function() {
    let idKamar = $(this).val();
    let data = dataKamar.find((item) => item.id == idKamar);
    $(".formPemesanan .priceKamar").val(currencyRupiah(data.harga));
  });

  // This jQuery snippet adds an event listener to an input element.When the value of the input changes, it retrieves the new value using `$(this).val()`.It then checks
  // if the value is not a number(NaN) using the `isNaN()`
  // function.If the value is not a number, it adds the "is-invalid"
  // class to the input element, typically used to indicate validation errors in Bootstrap forms.Otherwise,
  //   if the value is a valid number, it removes the "is-invalid"
  // class from the input element, indicating that the input is valid.This functionality likely serves to provide real - time validation feedback to users, highlighting input errors when non - numeric values are entered.
  $("input[name='jmlHari']").on("input", function() {
    let value = $(this).val();
    if (isNaN(value)) {
      $(this).addClass("is-invalid");
    } else {
      $(this).removeClass("is-invalid");
    }
  });

  // This JavaScript code sets up an event listener on input elements with the name attribute "identitas".When the user inputs text into one of these elements, the code retrieves the input 's value and checks if its length is not equal to 16 characters. If it'
  // s not, it adds a CSS class "is-invalid"
  // to the input element, indicating that the input is invalid.Otherwise,
  //   if the input is 16 characters long, it removes the "is-invalid"
  // class, indicating a valid input.This code is likely used
  // for form validation, ensuring that inputs with the name "identitas"
  // meet a specific length requirement.
  $("input[name='identitas']").on("input", function() {
    let value = $(this).val();
    if (value.length != 16) {
      $(this).addClass("is-invalid");
    } else {
      $(this).removeClass("is-invalid");
    }
  });


  // ensures that all form fields are filled out before prompting the user
  // for confirmation.If any field is empty, it displays a warning message.Otherwise, 
  // it prompts the user to confirm the form submission before proceeding with further actions.
  const simpan = () => {
    const cekForm = $(".formPemesanan").serializeArray();

    let cekFormLength = cekForm.length;

    for (let i = 0; i < cekFormLength; i++) {
      if (cekForm[i].value == "") {
        Swal.fire("Peringatan", "Data yang diisi tidak boleh kosong", "warning");
        return;
      }
    }

    // check nomor identitas is 16 digit
    if ($("input[name='identitas']").val().length != 16) {
      Swal.fire("Peringatan", "Nomor identitas harus 16 digit", "warning");
      return;
    }

    // check jmlHari is number
    if (isNaN($("input[name='jmlHari']").val())) {
      Swal.fire("Peringatan", "Jumlah hari harus angka", "warning");
      return;
    }


    Swal.fire({
      title: "Apakah anda yakin?",
      text: "Data yang sudah disimpan tidak dapat diubah",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Ya, simpan!",
    }).then((result) => {
      if (result.isConfirmed) {
        // call function sendData
        sendData();
      }
    });
  }

  // This JavaScript code defines a function called "jenisKelamin"
  // that takes an object "data" as its parameter.Within the function, it checks the value of the property "kelamin"
  // within the "data" object.If the value of "kelamin" is "laki", indicating male gender, the
  // function returns the string "Laki-laki"(which means "Male" in Indonesian).Otherwise,
  //   if the value is anything else, it returns "Perempuan"(which means "Female" in Indonesian).This
  // function essentially translates gender values into Indonesian language equivalents, serving a localization or presentation purpose within an application.

  const jenisKelamin = (data) => {
    if (data.kelamin == "laki") {
      return "Laki-laki";
    } else {
      return "Perempuan";
    }
  };

  // This JavaScript code defines a
  // function named "getNamaKamar"
  // that takes an object "data"
  // as its parameter.Within the
  // function, it searches
  // for an item in the "dataKamar"
  // array that matches the provided "data.kamar"
  // ID.If a match is found, it returns an object containing two properties: "namaKamar", which holds the name of the matched room(
  //   if found), and "harga", which holds the price of the matched room(
  //   if found).The use of the optional chaining operator(?.) ensures that
  // if the "kamar"
  // variable is null or undefined, accessing its properties won 't throw an error. This function is likely used to retrieve information about a specific room based on its ID, such as its name and price, within a larger application context.

  const getNamaKamar = (data) => {
    let kamar = dataKamar.find((item) => item.id == data.kamar);
    return {
      namaKamar: kamar?.nama,
      harga: kamar?.harga
    }
  };

  // This JavaScript code defines a
  // function called "changeDatetoLocale"
  // that takes a date string "data"
  // as its parameter.Within the
  // function, it creates a new Date object using the provided date string.Then, it utilizes the Date object 's "toLocaleDateString" method to convert the date into a string representing the date portion according to the current locale settings of the user'
  // s environment.This
  // function essentially converts a date string into a localized date format, making it suitable
  // for display in a user interface where the date presentation should conform to the user 's regional preferences.
  const changeDatetoLocale = (data) => {
    let date = new Date(data);
    return date.toLocaleDateString();
  };

  // This JavaScript code defines a
  // function named "isBreakfast"
  // that takes an object "data"
  // as its parameter.Within the
  // function, it checks
  // if the "breakfast"
  // property of the provided data object is equal to the string "1".If it is, indicating that breakfast is included, the
  // function returns "Ya"(which means "Yes" in Indonesian).Otherwise,
  // if the "breakfast"
  // property is not equal to "1"
  // or is undefined, the
  // function returns "Tidak"(which means "No" in Indonesian).This
  // function serves to determine whether breakfast is included based on the value of the "breakfast"
  // property in the provided data object, likely used in a context where information about breakfast inclusion needs to be presented in a user - friendly format.

  const isBreakfast = (data) => {
    if (data?.breakfast == "1") {
      return "Ya";
    } else {
      return "Tidak";
    }
  };

  // This JavaScript
  // function, `calculateTagihan`, computes the total bill
  // for a booking item based on the number of days(`jmlHari`) and the selected room type 's price retrieved through the `getNamaKamar` function. 
  // It initializes variables for the total bill and a flag indicating whether a discount is applied. Additionally, it checks if breakfast is included (`breakfast` equals "1") and adds the breakfast cost per day if applicable. If the booking spans more than three days, a 10% discount is applied to the total bill. Finally, it formats the total bill into Indonesian Rupiah currency and returns an object containing the formatted bill and a boolean indicating if a discount was applied.

  const calculateTagihan = (item) => {
    const hari = item.jmlHari;

    const kamarPrice = getNamaKamar(item).harga;

    let totalTagihan = 0
    let isDiskon = false;

    const isBreakfast = item.breakfast == "1" ? true : false;

    if (isBreakfast) {
      totalTagihan = (kamarPrice * hari) + (80000 * hari)
    } else {
      totalTagihan = kamarPrice * hari;
    }

    if (hari > 3) {
      totalTagihan = totalTagihan - (totalTagihan * 0.1)
      isDiskon = true;
    }

    return {
      totalTagihan: currencyRupiah(totalTagihan),
      isDiskon: isDiskon
    }
  }

  // function dynamically generates HTML content to display a result summary based on the response data received from a server request.
  // It formats and presents various details related to a travel reservation, 
  // such as contact information, travel dates, selected package options, and total cost.

  const showResultResponse = (result) => {
    let html = "";
    html += `
      <div class="alert alert-success" role="alert">
        ${result.message}
      </div>
              <table>
          <tr>
            <td style="width: 30%;">Nama Pemesan</td>
            <td>:</td>
            <td>${result.data?.nama}</td>
          </tr>
          <tr>
            <td>Nomor Identitas</td>
            <td>:</td>
            <td>${result.data?.identitas}</td>
          </tr>
          <tr>
            <td>Jenis Kelamin</td>
            <td>:</td>
            <td>${jenisKelamin(result.data)}</td>
          </tr>
          <tr>
            <td>Tipe Kamar</td>
            <td>:</td>
            <td>${getNamaKamar(result.data).namaKamar}</td>
          </tr>
          <tr>
            <td>Durasi Penginapan</td>
            <td>:</td>
            <td>${result.data.jmlHari}
           Hari 
            </td>
          </tr>
          <tr>
            <td>Discount</td>
            <td>:</td>
            <td>${calculateTagihan(result.data).isDiskon ? '10%' : '-'}</td>
          </tr>
          <tr>
            <td>Total Bayar</td>
            <td>:</td>
            <td>${calculateTagihan(result.data).totalTagihan}</td>
          </tr>
        </table>
      `

    $(".modalForm .modal-body").html(html);
    $(".modalForm").modal("show");
  };

  // function facilitates the submission of form data to the backend server, handles the server 's response, and updates the user interface accordingly. 
  // It ensures the proper handling of form data and provides feedback to the user upon successful submission.
  const sendData = () => {
    const data = $(".formPemesanan").serializeArray();
    const formData = {}

    data.forEach((item) => {
      formData[item.name] = item.value;
    });

    // get value from checkbox

    formData["harga"] = dataKamar.find((item) => item.id == formData.kamar).harga;

    // console.log(formData);

    // // send data to backend
    $.ajax({
      url: "/backend/form.php",
      type: "POST",
      data: JSON.stringify(formData),
      success: function(result) {
        Swal.fire("Data berhasil disimpan!", "", "success");
        resultSave = result;
        showResultResponse(result);
        resetForm();
      },
    });
  };
</script>
<script src="/assets/js/globalFunction.js"></script>

<?php
$content = ob_get_clean();
require '../../page/components/index.php';
?>