<?php
// session_start() initializes or resumes a session, allowing you to store and retrieve session data.
// The conditional statement checks if the user is logged in by verifying the presence of a specific session variable ('role').
//  If the user is not logged in, they are redirected to the login page.
// ob_start() turns on output buffering, which captures output generated by PHP scripts.
session_start();
if (!isset($_SESSION['role'])) {
  header('Location: /jwd/page/auth/login.php');
}

ob_start();
?>
<div class="resultSimpan container mt-5"></div>
<!-- form -->
<div class="container mt-5">
  <h1 class="display-6">Form Pemesanan Paket Wisata</h1>

  <form class="row g-3 formPemesanan">
    <div class="col-md-4">
      <div class="form-group">
        <label for="">Nama Pemesan</label>
        <input type="text" name="nama" class="form-control" name="" />
      </div>
    </div>

    <div class="col-md-4">
      <div class="form-group">
        <label for="">Nomor Telp / HP</label>
        <input type="number" name="phone" class="form-control" />
      </div>
    </div>

    <div class="col-md-4">
      <div class="form-group">
        <label for="">Email</label>
        <input type="email" name="email" class="form-control" />
      </div>
    </div>

    <div class="col-md-3">
      <div class="form-group">
        <label for="">Jumlah Orang</label>
        <input type="number" name="jumlah_org" class="form-control jmlOrg" />
        <small class="form-text"><span class="text-danger">*</span>Jika Pemesanan lebih dari 5
          orang, maka anda berhak mendapatkan diskon 10%</small>
      </div>
    </div>

    <div class="col-md-3">
      <div class="form-group">
        <label for="">Tanggal Berangkat</label>
        <input type="date" name="tgl_berangkat" class="form-control checkIn" />
      </div>
    </div>

    <div class="col-md-3">
      <div class="form-group">
        <label for="">Tanggal Pulang</label>
        <input type="date" name="tgl_pulang" class="form-control checkOut" disabled />
      </div>
    </div>

    <div class="col-md-3">
      <div class="form-group">
        <label for="">Pelayanan Paket Perjalanan</label>
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="1000000" id="flexCheckDefault" />
          <label class="form-check-label" for="flexCheckDefault">
            Penginapan (Rp. 1.000.000)
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="1200000" id="flexCheckDefault" />
          <label class="form-check-label" for="flexCheckDefault">
            Transportasi (Rp.1.200.000)
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="500000" id="flexCheckDefault" />
          <label class="form-check-label" for="flexCheckDefault">
            Makanan (Rp. 500.000)
          </label>
        </div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="">Harga Paket Perjalanan</label>
        <input type="text" class="form-control hargaPaketPerjalanan" readonly />
      </div>
    </div>
    <div class="col-md-6">
      <div class="form-group">
        <label for="">Jumlah Tagihan</label>
        <input type="text" class="form-control jumlahTagihan" />
      </div>
    </div>

    <div class="col-12">
      <button class="btn btn-success" type="button" onclick="kalkulasiTagihan()">
        Hitung
      </button>
      <button class="btn btn-success mx-2" type="button" onclick="simpan()">Simpan</button>
      <a class="btn btn-danger" type="button" href="/jwd" onclick="resetForm()">
        Batal
      </a>
    </div>
  </form>
</div>

<script>
  let resultSave = null;
  // ensures that all form fields are filled out before prompting the user
  // for confirmation.If any field is empty, it displays a warning message.Otherwise, 
  // it prompts the user to confirm the form submission before proceeding with further actions.
  const simpan = () => {
    const cekForm = $(".formPemesanan").serializeArray();

    let cekFormLength = cekForm.length;

    for (let i = 0; i < cekFormLength; i++) {
      if (cekForm[i].value == "") {
        Swal.fire("Peringatan", "Data yang diisi tidak boleh kosong", "warning");
        return;
      }
    }

    Swal.fire({
      title: "Apakah anda yakin?",
      text: "Data yang sudah disimpan tidak dapat diubah",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Ya, simpan!",
    }).then((result) => {
      if (result.isConfirmed) {
        // call function sendData
        sendData();
      }
    });
  }

  // function converts a given date to a localized date string, allowing you to display dates in a format appropriate
  // for the user 's locale.
  const changeDatetoLocale = (date) => {
    let newDate = new Date(date);
    return newDate.toLocaleDateString();
  };

  // determines the package options included in a travel 
  // package object and returns a string describing those options, or "Tidak ada paket"
  // if no options are found.

  const paketPerjalanan = (item) => {

    let paket = [];
    if (item.paket_inap == "1") {
      paket.push("Paket Inap");
    }
    if (item.paket_transport == "1") {
      paket.push("Paket Transport");
    }
    if (item.paket_makan == "1") {
      paket.push("Paket Makan");
    }

    if (paket.length == 0) {
      return "Tidak ada paket";
    }

    return paket.join(", ");
  };

  // calculates the total price of a travel package based on the included 
  // package options and returns the price as both an integer value 
  // and a formatted string with the currency symbol.
  const pricePackage = (item) => {
    let harga = 0;
    if (item.paket_inap == "1") {
      harga += 1000000;
    }
    if (item.paket_transport == "1") {
      harga += 1200000;
    }
    if (item.paket_makan == "1") {
      harga += 500000;
    } else {
      harga += 0;
    }

    return {
      int: harga,
      string: `Rp ${harga.toLocaleString()}`
    };
  };

  // calculates the total number of days between two dates and returns the result.It 's useful for determining 
  // the duration of a travel package or any other scenario where the duration between two dates needs to be calculated.
  const calculateTotalDaysItem = (item) => {
    let tglBerangkat = new Date(item.tgl_berangkat);
    let tglPulang = new Date(item.tgl_pulang);
    let diffTime = Math.abs(tglPulang - tglBerangkat);
    let diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  // function calculates the total cost of a travel package, considering the duration of the trip, the number of travelers, 
  // and any applicable discounts.It returns the total cost as a formatted string with or without a discount, 
  // depending on the number of travelers.

  const calculateTotalItem = (item) => {
    let totalDays = calculateTotalDaysItem(item);

    if (calculateTotalDaysItem(item) == 0) {
      totalDays = 1;
    }

    const totalTagihan =
      pricePackage(item).int * totalDays * item.jumlah_org;

    if (item.jumlah_org > 5) {
      const diskon = totalTagihan * 0.1;

      return `Rp ${totalTagihan.toLocaleString()} (Diskon 10% = Rp ${(
              totalTagihan - diskon
            ).toLocaleString()})`;
    } else {
      return `Rp ${totalTagihan.toLocaleString()}`;
    }
  };

  // function dynamically generates HTML content to display a result summary based on the response data received from a server request.
  // It formats and presents various details related to a travel reservation, 
  // such as contact information, travel dates, selected package options, and total cost.

  const showResultResponse = (result) => {
    let html = "";
    html += `
      <div class="alert alert-success" role="alert">
        ${result.message}
      </div>
      <table class="table mt-2">
      <thead>
        <tr>
          <th>Nama Pemesan</th>
          <th>Nomor Telp / HP</th>
          <th>Email</th>
          <th>Jumlah Orang</th>
          <th>Tanggal Berangkat</th>
          <th>Tanggal Pulang</th>
          <th>Pelayanan Paket Perjalanan</th>
          <th>Harga Paket Perjalanan</th>
          <th>Jumlah Tagihan</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>${result.data.nama}</td>
          <td>${result.data.phone}</td>
          <td>${result.data.email}</td>
          <td>${result.data.jumlah_org}</td>
          <td>${changeDatetoLocale(result.data.tgl_berangkat)}</td>
          <td>${changeDatetoLocale(result.data.tgl_pulang)}</td>
          <td>${paketPerjalanan(result.data)}</td>
          <td>${pricePackage(result.data).string}</td>
          <td>${calculateTotalItem(result.data)}</td>
        </tr>
      </tbody>
    </table>
      `

    $(".resultSimpan").html(html);
  };
  sendData
  // function facilitates the submission of form data to the backend server, handles the server 's response, and updates the user interface accordingly. 
  // It ensures the proper handling of form data and provides feedback to the user upon successful submission.
  const sendData = () => {
    const data = $(".formPemesanan").serializeArray();
    const formData = {}

    data.forEach((item) => {
      formData[item.name] = item.value;
    });

    // get value from checkbox

    formData["paket_inap"] = $("input[type='checkbox']")[0].checked;
    formData["paket_transport"] = $("input[type='checkbox']")[1].checked;
    formData["paket_makan"] = $("input[type='checkbox']")[2].checked;

    console.log(formData);

    // send data to backend
    $.ajax({
      url: "/jwd/backend/form.php",
      type: "POST",
      data: JSON.stringify(formData),
      success: function(result) {
        Swal.fire("Data berhasil disimpan!", "", "success");
        resultSave = result;
        showResultResponse(result);
        resetForm();
      },
    });
  };
</script>
<script src="../../js/globalFunction.js"></script>

<?php
$content = ob_get_clean();
require '../../page/components/index.php';
?>